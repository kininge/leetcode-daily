name: Update repo statistics 

on:
  push: # whenever git push happened
    paths: # run when file path here is changed in git push
      - "problems/**"
      - ".github/workflows/**"
  workflow_dispatch: {} # manually triggering is also possible

permissions:
  contents: write # allow actions bot to read and push commits

jobs: # workflow can have multiple jobs - but we're going to add just 1
  update: # job called update
    runs-on: ubuntu-latest # choose the latest Ubuntu server
    steps:

      # get commit history and GitHub credentials 
      - name: Checkout repository
        uses: actions/checkout@v4 # copy all commit history in runner
        with:
          fetch-depth: 0 # fetch full history (depth 0 means full)
          persist-credentials: true   # remember GITHUB_TOKEN so later use  for git push

      # install Node version 20 on our Ubuntu server
      - name: Setup Node.js 20
        uses: actions/setup-node@v4 # install node
        with:
          node-version: "20" # install node version 20

      # install npm packages
      - name: Install npm deps
        run: | # if package.json exists, then install npm packages
          if [ -f package.json ]; then npm ci; fi 

      - name: Detect changed problem files
        id: changed
        run: |
          # For push events: compare BEFORE..AFTER; fallback to list all problems for manual runs
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "Event: push"
            BEFORE="${{ github.event.before }}"
            AFTER="${{ github.sha }}"
            # ensure git refs exist
            git fetch --no-tags --prune origin "$BEFORE" || true
            git fetch --no-tags --prune origin "$AFTER" || true
            CHANGED=$(git diff --name-only "$BEFORE" "$AFTER" -- 'problems/*.md' || true)
          else
            echo "Event: ${{ github.event_name }} (workflow_dispatch?) - processing all problems"
            CHANGED=$(ls problems/*.md 2>/dev/null || true)
          fi

          # Filter out empty / whitespace
          CHANGED=$(echo "$CHANGED" | sed '/^\s*$/d' | tr '\n' ' ')
          echo "changed_files=$CHANGED" >> $GITHUB_OUTPUT
          echo "Changed files: $CHANGED"
      
      - name: Run addProblem.js for each changed file
        if: steps.changed.outputs.changed_files != ''
        run: |
          set -euo pipefail
          set -x
          printf '%s\n' "${{ steps.changed.outputs.changed_files }}" | while IFS= read -r f; do
            f="$(echo "$f" | sed -E 's/^[[:space:]]+|[[:space:]]+$//g')"   # defensive trim (optional)
            [ -z "$f" ] && continue
            if [ -f "$f" ]; then
              echo "Processing: [$f]"
              node _scripts/addProblem.js "$f"
            else
              echo "Warning: file not found: [$f]"
            fi
          done

      - name: Run image generator (optional) ‚Äî only if scripts changed or assets needed
        if: ${{ always() }}
        run: |
          set -euxo pipefail
          echo "üîç Checking for image generator..."
          if [ -f _scripts/generate_images.js ]; then
            echo "‚úÖ Found: _scripts/generate_images.js"
            echo "‚öôÔ∏è  Running: node _scripts/generate_images.js"
            node _scripts/generate_images.js || echo "‚ö†Ô∏è  Image generator exited non-zero; continuing anyway"
          else
            echo "‚ÑπÔ∏è  No image generator found, skipping"
          fi
          echo "üèÅ Image generation step complete."


      - name: Show git status (debug)
        run: git --no-pager status --porcelain --untracked-files=no || true

      - name: Commit and push changes (if any)
        run: |
          # Configure committer
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Stage the changes you expect (lists, data.json, generated assets)
          git add easy.md medium.md hard.md _scripts/data.json assets/*.svg || true

          # Only commit if there are staged changes
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          git commit -m "chore(actions): update problem lists & data.json ‚Äî run by GitHub Actions [skip ci]" || {
            echo "Commit failed or nothing to commit."
            exit 0
          }

          # Push using the token provided by actions/checkout (persist-credentials: true)
          git push origin HEAD:${{ github.ref_name }}
